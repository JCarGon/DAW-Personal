C:\xampp\mysql\bin\mysql.exe -u root -p

CREATE DATABASE if not EXISTS nombre_database; -> crear una database nueva

USE nombre_database; -> usar la database seleccionada

SHOW DATABASE nombre_database; -> Muestra las databases que hay creadas
SHOW TABLES; -> Mostrar las tablas que tiene la database en uso
DESC nombre_tabla; -> Muestra la tabla con los atributos que tiene

DROP TABLE IF EXISTS nombre_tabla; -> elimina la tabla si existe

CREATE TABLE nombre_tabla(
	atributo tipo_Atributo(cantidad) PRIMARY KEY (en caso de serlo), -> 1 manera de hacerlo cuando la PK es solo es un atributo
	CODIGO CHAR(5) PRIMARY KEY,
      NOMBRE VARCHAR(15),
      DIRECTOR VARCHAR(25)
	PRIMARY KEY (nombre_atributo de esta tabla), -> Otra manera de declarar una PK (orientado a cuando está formada por +1 atributo)
	CONSTRAINT fk_nombreTablaActual_nombreTablaOrigen FOREIGN KEY (nombreAtributo en la TablaActual) REFERENCES nombre_tabla(nombreAtributo en la TablaOrigen)
	-> la clave foránea tiene que ser del mismo tipo y extensión que la clave primaria
);

NOT NULL -> el valor de ese atributo no puede ser nulo
DEFAULT -> si no se introduce el valor de ese atributo al meter una entrada, se le pone automáticamente
	el valor de default.
AUTO_INCREMENT -> incrementa en 1 el valor del atributo cada vez que se introduce un valor nuevo (en caso de no especificarlo)
UNSIGNED -> el tipo de atributo numérico no tiene signo, por lo que solo puede ser de valor positivo

TIPO DE DATOS:
tinyint (entero pequeño - hasta 256 números - 3 cifras)
char (cuando sé la longitud máxima del atributo)
varchar (cuando no sé la longitud máxima de un atributo)
timestap (fecha, hora (hora-minuto-segundo-milisegundo))
decimal (número de dígitos en total del número, dígitos de la parte decimal) -> decimal (4,2): 32,34.

PARA BORRAR:
Se pone al declarar la clave foránea; si no se especifica, establece el valor por defecto
ON DELETE CASCADE (borra el valor del atributo seleccionado en la tabla actual y en todas las tablas en las que esté como clave foránea ese atributo).
ON DELETE SET NULL (pone "null" a los valores de los atributos relacionados con el valor de atributo eliminado).

PARA ACTUALIZAR:
ON UPDATE CASCADE
ON UPDATE SET NULL

PARA ACTUALIZAR TABLAS:
ALTER TABLE


----------------------------------------------------------------------------------------------------------------------------------------------------------

SENTENCIA SELECT:
SELECT * FROM empleado; -> Muestra todas las columnas que tenga la tabla empleado.

SELECT emp_no, nombre, cargo FROM empleado;
-> Esto selecciona las 3 columnas y los datos que contienen de la tabla "empleado".

SELECT emp_no AS "Código", nombre, cargo FROM empleado;
-> AS sirve para cambiar el nombre de una columna y asignarle un alias temporal a la hora de mostrarla.

SELECT emp_no AS "Código", nombre AS "Empleado", salario/30 AS "Salario/día" FROM empleado;

SELECT * FROM empleado ORDER BY nombre (o número de la tabla); 
-> Muestra todas las columnas de la tabla empleado ordenadas de manera ascendente en función del nombre.

SELECT * FROM empleado ORDER BY cargo ASC, salario DESC, nombre; 
-> Muestra todas las columnas de la tabla empleado ordenadas por cargo de manera ascendente, salario de manera descendente y nombre.

SELECT * FROM empleado WHERE emp_no = 7902;
-> Seleccionar todos los datos de la tabla empleado cuyo número de empleado (emp_no) sea 7902.

SELECT * FROM empleado WHERE cargo = "EMPLEADO" AND salario > 120000;
-> Seleccionar todos los datos de la tabla empleado cuyo cargo sea empleado y su salario sea mayor de 120000.

SELECT * FROM empleado WHERE salario/12 > 10000;
-> Selecciona todos los datos de la tabla empleado donde el salario mensual supere los 10000.

SELECT * FROM empleado WHERE nombre LIKE "A%";
-> Selecciona todos los datos de la tabla empleado cuyo nombre empiece por A.

SELECT * FROM empleado WHERE nombre LIKE "A%" AND nombre LIKE "%O";
-> Selecciona todos los datos de la tabla empleado cuyo nombre empiece por A y temrine por O.

SELECT * FROM empleado WHERE nombre LIKE "%T%";
-> Selecciona todos los datos de la tabla empleado cuyo nombre contenga un T.

SELECT * FROM empleado WHERE nombre LIKE "_____O";
-> Selecciona todos los datos de la tabla empleado cuyo nombre tenga 6 letras y termine en O.

SELECT * FROM empleado WHERE fecha_alta LIKE "1980%"; ("1981-09%")
-> Selecciona todos los datos de la tabla empleado cuya fecha de alta sea 1980 (año 1981 y mes septiembre)

Todos registros de ese dieron de alta en el primer semestre del 1981 (1 ENERO HASTA 30 DEL junio).
SELECT * FROM EMPLEADO WHERE fecha_alta>="1981-01-01" AND fecha_alta<="1981-06-30";
SELECT * FROM EMPLEADO WHERE fecha_alta BETWEEN "1981-01-01" AND "1981-06-30";

SELECT * FROM EMPLEADO WHERE JEFE_DE=7902 OR JEFE_DE=7839; //// SELECT * FROM EMPLEADO WHERE JEFE_DE IN (7902,7839);
-> Las dos sirven para seleccionar todos los datos de la tabla empleado cuyo jefe_de sea 7908 o 7839; con IN se escribe menos.

SELECT EMPLEADO.NOMBRE, EMPLEADO.CARGO, EMPLEADO.DEPT_NO, DEPARTAMENTO.DNOM FROM EMPLEADO, DEPARTAMENTO WHERE EMPLEADO.DEPT_NO = DEPARTAMENTO.DEPT_NO;
-> Selecciona los datos nombre, cargo, dept_no y dnom de las tablas empleado y departamento; para que no haya problema de ambigüedad es necesario identificar de qué
tabla es cada atributo; la cláusula where es para que asocie el número de departamento de una tabla con el de la otra para que no se repitan valores que no deberían.

SELECT CLIENTE.CLIENTE_CODIGO, CLIENTE.NOMBRE, PEDIDO.FECHA_ENVIO FROM CLIENTE, PEDIDO WHERE CLIENTE.CLIENTE_CODIGO = PEDIDO.CLIENTE_CODIGO ORDER BY CLIENTE_CODIGO ASC;
-> Selecciona código, nombre y fecha de envío de los clientes que han hecho algún pedido.

										
											COMPOSICIONES INTERNAS:
*WHERE: ideal para filtrar datos de la consulta; por ejemplo:
	SELECT CLIENTE.CLIENTE_CODIGO, CLIENTE.NOMBRE, PEDIDO.FECHA_ENVIO FROM CLIENTE INNER JOIN PEDIDO ON CLIENTE.CLIENTE_CODIGO = PEDIDO.CLIENTE_CODIGO, WHERE 
	CLIENTE.NOMBRE = "JUAN";

*[INNER] JOIN: SELECT CLIENTE.CLIENTE_CODIGO, CLIENTE.NOMBRE, PEDIDO.FECHA_ENVIO FROM CLIENTE INNER JOIN PEDIDO ON CLIENTE.CLIENTE_CODIGO = PEDIDO.CLIENTE_CODIGO;
	-> Usar JOIN hace más eficiente la consulta que con el uso de la cláusula WHERE

*[NATURAL] JOIN: SELECT C.CLIENTE_CODIGO, C.NOMBRE, P.FECHA_ENVIO FROM CLIENTE C NATURAL JOIN PEDIDO P ORDER BY CLIENTE_CODIGO; -> El uso de NATURAL JOIN
	es adecuado cuando la clave principal y foránea se llaman de la misma manera, pero puede darse el caso de que haga la unión de otro atributo
	que no sean las claves.

------------------------------------------------------------------------------------------------------------------------------------------

CONSULTA MULTITABLA:
SELECT ATR1, ATR4 FROM TABLA1
{INNER, NATURAL, LEFT, RIGHT, FULL} JOIN TABLA1, TABLA2 ON TABLA1.ATR1 = TABLA2.ATR2
{INNER, NATURAL, LEFT, RIGHT, FULL} JOIN TABLA3 ON TABLA2.ATR2 = TABLA3.ATR3
{INNER, NATURAL, LEFT, RIGHT, FULL} JOIN TABLA4 ON TABLA3.ATR3 = TABLA4.ATR4
WHERE ...;
--> Esto vale para sacar atributos de cualquiera de las 4 tablas porque ya están relacionadas.

SELECT C.NOMBRE, P.PEDIDO_NUMERO, PR.DESCRIPCION, PRECIO_VENTA, P.PEDIDO_FECHA, CANTIDAD, IMPORTE FROM CLIENTE C
JOIN PEDIDO P ON C.CLIENTE_CODIGO=P.CLIENTE_CODIGO
JOIN DETALLE D ON P.PEDIDO_NUMERO=D.PEDIDO_NUMERO
JOIN PRODUCTO PR ON D.PRODUCTO_NUMERO=PR.PRODUCTO_NUMERO
WHERE P.PEDIDO_NUMERO=612;

-> para fechas: WHERE YEAR/MONTH/DAY(P.PEDIDO_FECHA) = 1 ; WHERE YEAR(P.PEDIDO_FECHA) = 1987 AND MONTH(P.PEDIDO_FECHA) = 3; -> Para concatenar año y mes

SELECT CODIGOPROVINCIA, SUM(HABITANTES), COUNT(HABITANTES) FROM POBLACIONES GROUP BY CODIGOPROVINCIA;
-> Selecciona codigo de provincia, suma de habitantes [SUM(HABITANTES)] y cuántas poblaciones tiene cada provincia [COUNT(HABITANTES)],
ya que la consulta está agrupada por códigos de provincia (GROUP BY)

SELECT CLIENTE, SUM(KW) FROM MEDICIONES GROUP BY CLIENTE;
-> Nombre y suma de KW de cada cliente (está agrupado por cliente)

SELECT CLIENTE, SUM(KW), MAX(KW) FROM MEDICIONES GROUP BY CLIENTE;
-> Idem consulta arriba + máximo KW de cada cliente

SELECT CLIENTE, SUM(KW), MAX(KW), MIN(KW), AVG(KW), COUNT(*) FROM MEDICIONES WHERE CLIENTE <= 50 GROUP BY CLIENTE HAVING AVG(KW)<=100;
-> Selecciona nombre, suma, máximo, mínimo, media de la tabla mediciones donde cliente (código) es <= 50, agrupados por cliente;
having se usa sobre una de las funciones utilizadas en la consulta como filtro

SELECT CLIENTE, YEAR(FECHAHORA), SUM(KW) FROM MEDICIONES GROUP BY CLIENTE, YEAR(FECHAHORA);
-> Selecciona cliente, año y suma de KW al año de la tabla mediciones agrupado por cliente y año

SELECT CLIENTES.NOMBRE, CLIENTES.APELLIDO, YEAR(MEDICIONES.FECHAHORA), SUM(KW) FROM CLIENTES INNER JOIN MEDICIONES
ON CLIENTES.CODIGO = MEDICIONES.CLIENTE GROUP BY CLIENTES.NOMBRE, CLIENTES.APELLIDO, YEAR(MEDICIONES.FECHAHORA);
-> Selecciona nombre, apellido, año de la medición y consumo total del año de las tablas cliente y mediciones, agrupados por nombre, apellido y medición del año.

SELECT CONCAT(DAY(FECHAHORA),"/", MONTH(FECHAHORA),"/", YEAR(FECHAHORA)) FROM MEDICIONES LIMIT 10;
SELECT CONCAT(MID(FECHAHORA,9,2),"/", MID(FECHAHORA,6,2),"/", LEFT(FECHAHORA,4)) FROM MEDICIONES LIMIT 10;
-> Concatena y cambia el formato de la fecha de año/mes/día a día/mes/año; la segunda línea es para hacerlo de manera diferente, seleccionando la posición en la que empieza
y hasta dónde llega.

AGRUPACIÓN: usa GROUP BY || select edad, count(*) from persona; -> devuelve la edad y la cantidad de personas que tienen esa edad
AGREGACIÓN: sumo registros sobre el total de los registros sin agrupar || select sum(edad) from persona; -> devuelve un registro con la suma de las edades de la tabla persona
Ambas tienen count, max, min, avg y sum.

								FUNCIONES CON FECHAS
DATEDIFF("AAAA/MM/DD","AAAA/MM/DD") -> Devuelve la diferencia entre dos fechas || Hay que poner la fecha mayor la primera || NOW() -> Da la fecha de hoy
SELECT DATEDIFF("2023/12/05", NOW()); -> Devuelve los días que faltan para mi cumpleaños

DATEADD("AAAA/MM/DD", INTERVAL CANTIDAD EXPRESIÓN)
SELECT DATE_ADD("2023/04/09", INTERVAL 60 DAY); -> Suma 60 días a la fecha introducida
SELECT ADDDATE("2023/04/09" INTERVAL 60 DAY);
SELECT ADDDATE("2023/02/06", INTERVAL -30 DAY); -> Resta X días a la fecha introducida

SELECT DATE_FORMAT(NOW(), "%d/%m/%Y"); -> Cambia el formato de la fecha
SELECT DATE_FORMAT(NOW(), "%W, %d/%M/%Y a las %r") AS FECHA; -> Monday, 06/February/2023
	%d = día (2 dígitos) 
	%m = mes (2 dígitos)
	%y = año (2 dígitos)
	%W = día (nombre)
	%M = mes (nombre)
	%Y = año con 4 cifras
	%r = fecha en formato 12 horas (AM, PM)

SET LC_TIME_NAMES = es_ES;
Traduce los nombres de días y meses al castellano; dura lo que dura la sesión

CHAR_LENGTH(atributo) -> cuenta cuántas letras tiene la palabra y devuelve un número
REPEAT("cadena", numero de veces) -> repite la cadena tantas veces
Saca el nombre, apellido y apellido2 de la tabla clientes poniendo "*" desde que termina el nombre hasta 20 (final del campo)
SELECT CONCAT(NOMBRE, REPEAT("*",20-CHAR_LENGTH(NOMBRE))) AS "Nombre", CONCAT(APELLIDO, REPEAT("*", 20-CHAR_LENGTH(APELLIDO))) AS "Apellido 1", 
CONCAT(APELLIDO2, REPEAT("*", 20-CHAR_LENGTH(APELLIDO2))) AS "Apellido 2" FROM CLIENTES LIMIT 10;

IF(valor1>valor2, resultado si es true, resultado si es false)

IFNULL(nombre del atributo, reemplazo)
SELECT NOMBRE, SALARIO, IFNULL(COMISION, "-") FROM EMPLEADO; -> Las comisiones que sean NULL aparecerán con un "-"
SELECT NOMBRE, IF() FROM EMPLEADO; -> Las comisiones que sean NULL aparecerán con un "-"

-Saca el nombre y compara salario y comisión para mostrar el mayor; en caso de las comisiones con valor NULL usamos IFNULL para sacar el salario directamente
SELECT NOMBRE, SALARIO, COMISION, IF(SALARIO>COMISION, SALARIO, IFNULL(COMISION, SALARIO)) AS "Mayor" FROM EMPLEADO;
SELECT NOMBRE, SALARIO, COMISION, IFNULL(IF(SALARIO>COMISION, SALARIO, COMISION), SALARIO) FROM EMPLEADO;

-------------------------------------------------------------------------------------------------------------------------------

BASE VUELTA:
1. Ciclistas que hayan ganado alguna etapa
SELECT DISTINCT CICLISTA.NOMBRE FROM CICLISTA NATURAL JOIN ETAPA;
SELECT DISTINCT CICLISTA.NOMBRE FROM CICLISTA NATURAL JOIN ETAPA WHERE CICLISTA.DORSAL = ETAPA.DORSAL;

2. Ciclistas que no han ganado una etapa. Hay que sacar con un left join todos los participantes, 
hayan ganado o no; en caso de no haber ganado saldrá "NULL". Esos son los que hay que sacar con IS NULL.
SELECT DISTINCT CICLISTA.NOMBRE, ETAPA.NETAPA FROM CICLISTA LEFT JOIN ETAPA 
ON CICLISTA.DORSAL = ETAPA.DORSAL WHERE ETAPA.DORSAL IS NULL;

3. Ciclistas que han ganado un puerto de montaña
SELECT DISTINCT CICLISTA.NOMBRE FROM CICLISTA JOIN PUERTO ON CICLISTA.DORSAL = PUERTO.DORSAL;

4. Ciclistas que no han ganado un puerto de montaña
SELECT DISTINCT CICLISTA.NOMBRE FROM CICLISTA LEFT JOIN PUERTO 
ON CICLISTA.DORSAL = PUERTO.DORSAL WHERE PUERTO.DORSAL IS NULL;

SELECT CICLISTA.NOMBRE FROM CICLISTA WHERE CICLISTA.DORSAL NOT IN[lo mismo que utilizar <>](SELECT PUERTO.DORSAL FROM PUERTO);

5. Etapas que pasan por más de un puerto
SELECT NETAPA, NOMPUERTO, COUNT(NETAPA) AS "PUERTOS EN ETAPA" FROM PUERTO GROUP BY NETAPA HAVING COUNT(NETAPA)>1;
 - Puertos que tiene cada etapa -
SELECT NETAPA, NOMPUERTO FROM PUERTO ORDER BY NETAPA ASC;
	- Count(*) cuenta incluyendo campos NULL; Count(importe) cuenta solo las veces que tenga contenido válido

6. Ciclistas que han ganado más de una etapa
SELECT CICLISTA.NOMBRE, COUNT(ETAPA.NETAPA) AS "Etapas ganadas" FROM CICLISTA JOIN ETAPA ON 
CICLISTA.DORSAL = ETAPA.DORSAL GROUP BY CICLISTA.NOMBRE HAVING COUNT(ETAPA.NETAPA)>1;

7. Nombre de los puertos con altura > AVG
SELECT NOMPUERTO, ALTURA FROM PUERTO WHERE ALTURA>(SELECT AVG(ALTURA) FROM PUERTO);

8. Nombre del ciclista más joven que ha ganado al menos una etapa
SELECT NOMBRE, EDAD FROM CICLISTA NATURAL JOIN ETAPA ORDER BY EDAD ASC LIMIT 1;

9. Nombre y edad de los ciclistas que han llevado >= 2 maillots
SELECT NOMBRE, EDAD, COUNT(*) AS "Maillots diferentes vestidos" FROM CICLISTA NATURAL JOIN LLEVA NATURAL JOIN MAILLOT GROUP BY NOMBRE HAVING(COUNT(*)>=2);
select nombre, edad, count(maillot.codigo) from ciclista natural join lleva natural join maillot group by nombre having count(maillot.codigo)>=2;

-------------------------------------------------------------------------------------------------------------------------------

1. Nombre de los ciclistas que no pertenezcan al equipo Kelme
SELECT NOMBRE, NOMEQ FROM CICLISTA WHERE NOMEQ = "Kelme";

2. Edad media de los ciclistas del equipo TVM
SELECT AVG(EDAD) FROM CICLISTA WHERE NOMEQ="TVM";

3. Nombre de los ciclistas que pertenezcan al mismo equipo que Miguel Indurain
SELECT NOMBRE FROM CICLISTA WHERE NOMEQ = (SELECT NOMEQ FROM CICLISTA WHERE NOMBRE="Miguel Indurain");

4. Obtener nombre y el director de los equipos a los que pertenezca algún ciclista mayor de 33 años.
SELECT DISTINCT NOMEQ AS "Nombre Equipo", DIRECTOR FROM EQUIPO NATURAL JOIN CICLISTA WHERE EDAD > 33;

5. Nombre y edad media de cada equipo
select distinct nomeq as "Nombre Equipo", avg(edad) as "Edad Media" from ciclista group by nomeq;
	-lo mismo de arriba pero saca los equipos con edad media menor de 30 años
	select distinct nomeq as "Nombre Equipo", avg(edad) as "Edad Media" from ciclista group by nomeq having avg(edad)<30;
	-nombre de equipo y edad del miembro más viejo del equipo
	select distinct nomeq as "Nombre Equipo", max(edad) as "Mayor Edad de Ciclista" from ciclista group by nomeq;
	-nombre y edad del ciclista más joven
	select nombre, edad from ciclista where edad = [lo mismo que poner "IN"] (select min(edad) from ciclista);

---------------------------------------------------------------------------------------------------------------------------------

DELETE FROM DETALLE WHERE PEDIDO_NUMERO=620;
Borra todos los pedidos que tengan el número 620
ROLLBACK;
Recuperar los elementos eliminados en el último cambio, siempre que el commit esté a 0 -> SET AUTOCOMMIT=0;

INSERT INTO nombre_tabla (columna1, columna2...) VALUES 
(valor1, valor2...),
(valor1, valor2...),
(valor1, valor2...);
	-> Ejemplo db: empresa, tabla: departamento<-
INSERT INTO DEPARTAMENTO (DEPT_NO, DNOM, LOC)
VALUES (50, "INFORMÁTICA", "SEVILLA");
/*
Si voy a insertar valores en todas las columnas, podemos omitir la parte de identificar las columnas en el orden en el que voy a insertar datos, ya que
se sobreentiende que vamos a insertar todos los valores en el orden en el que está en la tabla.
	INSERT INTO DEPARTAMENTO VALUES (50, "INFORMÁTICA", "SEVILLA");
*/
Para borrar algo dentro de una tabla:
DELETE FROM DEPARTAMENTO WHERE DEPT_NO=50;

MODIFICACIONES
UPDATE DEPARTAMENTO SET DNOM = LOWER(DNOM); -> Cambia los valores de la columna nombre-departamento, de la tabla departamento, a minúsculas
UPDATE DEPARTAMENTO SET DNOM=UPPER(DNOM), LOC=UPPER(LOC); -> Cambia los valores de las dos columnas a mayúsculas
UPDATE DETALLE SET IMPORTE = 0; -> Pone todos los importes de la tabla detalle a 0
UPDATE DETALLE SET IMPORTE = (PRECIO_VENTA*CANTIDAD); -> Le da a cada importe su valor correspondiente de cada operación

UPDATE DETALLE SET CANTIDAD=5 WHERE PEDIDO_NUMERO=604 AND DETALLE_NUMERO=3; -> Modifica la cantidad del pedido 604 de 10 a 5
UPDATE DETALLE SET IMPORTE = (PRECIO_VENTA*CANTIDAD); -> actualizar el valor del importe conforme a la nueva cantidad

/*Actualiza el total de la tabla PEDIDO, del pedido 604, con el importe total que le corresponde de la tabla DETALLE donde el pedido = 604*/
UPDATE PEDIDO SET TOTAL = (SELECT SUM(IMPORTE) FROM DETALLE WHERE PEDIDO_NUMERO = 604) WHERE PEDIDO_NUMERO=604;

actualizar columna total de la tabla PEDIDO al valor correspondiente de la suma de los importes de la tabla DETALLE;
UPDATE PEDIDO SET TOTAL = (SELECT SUM(IMPORTE) FROM DETALLE WHERE PEDIDO_NUMERO=PEDIDO.PEDIDO_NUMERO);